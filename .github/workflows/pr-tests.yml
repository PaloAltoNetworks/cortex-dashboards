name: PR JSON Check

on:
  pull_request:
    branches: [ main ] 

jobs:
  test-json:
    runs-on: ubuntu-latest
    env:
        GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Check for any changed JSON files
        id: check-json-files
        run: |
            echo "Finding changed files for PR #${{ github.event.pull_request.number }}"

            # Get the raw multi-line output from the gh command
            changed_files_multiline=$(gh pr diff ${{ github.event.pull_request.number }} --name-only | grep '\.json$' || true)

            # Convert the multi-line list into a single-line, space-separated string.
            # This is the format your existing 'for' loops expect.
            changed_files_single_line=$(echo $changed_files_multiline)

            echo "The following files will be checked: $changed_files_single_line"

            # Set the output as a single line, making it compatible with your downstream steps
            echo "json_files=$changed_files_single_line" >> $GITHUB_OUTPUT

      - name: Check for email address in JSON files
        if: steps.check-json-files.outputs.json_files != ''
        run: |
            echo "Checking the following JSON files:"
            json_files=$(echo ${{ steps.check-json-files.outputs.json_files }})
            echo "$json_files"

            for file in $json_files; do
                echo "---"
                echo "Checking file: $file"
                if ! grep -q '"creator_mail":' "$file"; then
                echo "➡️ Key 'creator_mail' not found in $file. Skipping."
                continue
                fi

            # Pipe the jq output directly into a while read loop
            jq -r '.. | .creator_mail? // empty' "$file" | while IFS= read -r creator_mail; do
                # Skip any empty lines that jq might output
                if [ -z "$creator_mail" ]; then
                    continue
                fi

                echo "Checking Creator Email"
                if [ "$creator_mail" == "" ]; then
                    echo "✅ Success: 'creator_mail' is an empty string."
                else
                    echo "❌ Error: 'creator_mail' should be an empty string, but found '$creator_mail'."
                    exit 1
                fi
                done
            done

      - name: Check for tenant URL in JSON files
        if: steps.check-json-files.outputs.json_files != ''
        run: |
            json_files=$(echo ${{ steps.check-json-files.outputs.json_files }})

            for file in $json_files; do
                echo "---"
                echo "Checking file: $file for tenant URL"

                if jq -e '([.. | .url? | select(contains("paloaltonetworks.com")?)] | length) == 0' "$file"; then
                    echo "✅ All URLs in $file are valid."
                else
                    echo "❌ A URL was found in $file that appears to be a tenant URL."
                    exit 1
                fi
            done

      - name: Check for placeholder.com URL in JSON files
        if: steps.check-json-files.outputs.json_files != ''
        run: |
            json_files=$(echo ${{ steps.check-json-files.outputs.json_files }})

            for file in $json_files; do
                echo "---"
                echo "Checking file: $file for 'placeholder.com' URL"

                if jq -e '([.. | .url? | select(. != null and (contains("placeholder.com") | not))] | length) == 0' "$file"; then
                    echo "✅ All URLs in $file are valid."
                else
                    echo "❌ An invalid URL (that does not contain 'placeholder.com') was found in $file."
                    exit 1
                fi
            done

      - name: Check for description in widgets and dashboard in JSON files
        if: steps.check-json-files.outputs.json_files != ''
        run: |
            echo "Checking the following JSON files:"

            json_files=$(echo ${{ steps.check-json-files.outputs.json_files }})
            echo "$json_files"

            for file in $json_files; do
                echo "---"
                echo "Checking file: $file for 'description'"

                if jq -e '([.. | .description? | select(. == null or . == "")] | length) == 0' "$file"; then
                    echo "✅ All descriptions in $file are valid."
                else
                    echo "❌ A description in $file is missing or empty."
                    exit 1
                fi
            done